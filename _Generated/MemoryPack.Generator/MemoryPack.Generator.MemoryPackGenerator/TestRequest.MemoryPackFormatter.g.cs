
// <auto-generated/>
#nullable enable
#pragma warning disable CS0108 // hides inherited member
#pragma warning disable CS0162 // Unreachable code
#pragma warning disable CS0164 // This label has not been referenced
#pragma warning disable CS0219 // Variable assigned but never used
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8601 // Possible null reference assignment
#pragma warning disable CS8602
#pragma warning disable CS8604 // Possible null reference argument for parameter
#pragma warning disable CS8619
#pragma warning disable CS8620
#pragma warning disable CS8631 // The type cannot be used as type parameter in the generic type or method
#pragma warning disable CS8765 // Nullability of type of parameter
#pragma warning disable CS9074 // The 'scoped' modifier of parameter doesn't match overridden or implemented member
#pragma warning disable CA1050 // Declare types in namespaces.

using System;
using MemoryPack;


/// <remarks>
/// MemoryPack GenerateType: Object<br/>
/// <code>
/// <b>NodaTime.Instant</b> Instant1<br/>
/// <b>NodaTime.Instant?</b> Instant2<br/>
/// </code>
/// </remarks>
partial record TestRequest : IMemoryPackable<TestRequest>
{
    static readonly IMemoryPackFormatter<global::NodaTime.Instant> __Instant1Formatter = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<global::InstantFormatter>(typeof(global::TestRequest).GetProperty("Instant1", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)).GetFormatter();
    static readonly IMemoryPackFormatter<global::NodaTime.Instant?> __Instant2Formatter = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<global::InstantFormatter>(typeof(global::TestRequest).GetProperty("Instant2", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)).GetFormatter();

    static partial void StaticConstructor();

    static TestRequest()
    {
        global::MemoryPack.MemoryPackFormatterProvider.Register<TestRequest>();
        StaticConstructor();
    }

    [global::MemoryPack.Internal.Preserve]
    static void IMemoryPackFormatterRegister.RegisterFormatter()
    {
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<TestRequest>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.MemoryPackableFormatter<TestRequest>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<TestRequest[]>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ArrayFormatter<TestRequest>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::NodaTime.Instant?>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.NullableFormatter<global::NodaTime.Instant>());
        }

    }

    [global::MemoryPack.Internal.Preserve]
    static void IMemoryPackable<TestRequest>.Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, scoped ref TestRequest? value) 
    {

        if (value == null)
        {
            writer.WriteNullObjectHeader();
            goto END;
        }

        writer.WriteObjectHeader(2);
        writer.WriteValueWithFormatter(__Instant1Formatter, value.@Instant1);
        writer.WriteValueWithFormatter(__Instant2Formatter, value.@Instant2);

    END:

        return;
    }

    [global::MemoryPack.Internal.Preserve]
    static void IMemoryPackable<TestRequest>.Deserialize(ref MemoryPackReader reader, scoped ref TestRequest? value)
    {

        if (!reader.TryReadObjectHeader(out var count))
        {
            value = default!;
            goto END;
        }



        global::NodaTime.Instant __Instant1;
        global::NodaTime.Instant? __Instant2;

        
        if (count == 2)
        {
            if (value == null)
            {
                __Instant1 = reader.ReadValueWithFormatter<IMemoryPackFormatter<global::NodaTime.Instant>, global::NodaTime.Instant>(__Instant1Formatter);
                __Instant2 = reader.ReadValueWithFormatter<IMemoryPackFormatter<global::NodaTime.Instant?>, global::NodaTime.Instant?>(__Instant2Formatter);


                goto NEW;
            }
            else
            {
                __Instant1 = value.@Instant1;
                __Instant2 = value.@Instant2;

                reader.ReadValueWithFormatter(__Instant1Formatter, ref __Instant1);
                reader.ReadValueWithFormatter(__Instant2Formatter, ref __Instant2);

                goto SET;
            }

        }
        else if (count > 2)
        {
            MemoryPackSerializationException.ThrowInvalidPropertyCount(typeof(TestRequest), 2, count);
            goto READ_END;
        }
        else
        {
            if (value == null)
            {
               __Instant1 = default!;
               __Instant2 = default!;
            }
            else
            {
               __Instant1 = value.@Instant1;
               __Instant2 = value.@Instant2;
            }


            if (count == 0) goto SKIP_READ;
            reader.ReadValueWithFormatter(__Instant1Formatter, ref __Instant1); if (count == 1) goto SKIP_READ;
            reader.ReadValueWithFormatter(__Instant2Formatter, ref __Instant2); if (count == 2) goto SKIP_READ;

    SKIP_READ:
            if (value == null)
            {
                goto NEW;
            }
            else
            {
                goto SET;
            }

        }

    SET:
        goto NEW;

        goto READ_END;

    NEW:
        value = new TestRequest(__Instant1, __Instant2)
        {

        };

    READ_END:

    END:

        return;
    }
}
